apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Component.Name}}
spec:
  selector:
    matchLabels:
      app: {{.Provides.Name}}
  replicas: {{.Platform.numInstances.Value}}
  template:
    metadata:
      labels:
        app: {{.Provides.Name}}
    spec:
      containers:
        - name: {{.Provides.Name}}
          image: {{.ProvideParams.imageName.Value}}
          imagePullPolicy: {{.Platform.imagePullPolicy.Value}}
          {{- if .Uses.storage }}
          volumeMounts:
          - mountPath: "/foo/bar"
            name: happy
          {{- end}}
          ports:
          - containerPort: {{.ProvideParams.port.Value}}
          {{- if gt (len .Uses) 0}}
          env:
          {{- end}}
          {{- range $usesKey, $usesValue := .Uses }}
          {{- if eq $usesValue.Type "environment"}}
            {{- range $parmsKey, $parmsValue := $usesValue.Params}}
          - name: {{$parmsKey}}
            value: '{{$parmsValue.Value}}'
            {{- end}}
          {{- end}}
          {{- if eq $usesValue.Type "secret"}}
            {{- range $parmsKey, $parmsValue := $usesValue.Params}}
          - name: {{$parmsKey}}
            valueFrom:
              secretKeyRef:
                name: {{$usesValue.Name}}
                key: {{$parmsValue.Value}}
            {{- end}}
          {{- end}}
          {{- end}}
          {{- if .Uses.storage }}
      volumes:
        - name: happy
          persistentVolumeClaim:
            claimName: pvc-name
          {{- end}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{.Provides.Name}}-service
  namespace: default
  labels:
    app: {{.Component.Name}}
spec:
  type: NodePort
  selector:
    app: {{.Provides.Name}}
  ports:
    - protocol: TCP
      port: {{.ProvideParams.port.Value}}
      targetPort: {{.ProvideParams.port.Value}}
      {{if .Platform.nodePort.Value}}nodePort: {{.Platform.nodePort.Value}}{{end}}
